library(swirl)
swirl()
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this moment
this_moment
this_moment <- update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
?now
nyc <- now("America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours=17, minutes=34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive, tzone="Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz="Singapore")
last_time
?interval
how_long <- interval(last_time, arrive)
as.period(how_long)
stopwatch()
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
dim(amzn)
library(lubridate)
sampleTimes[1]
year(sampleTimes[1])
month(sampleTimes[1])
View(amzn)
months <- month(sampleTimes)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
months <- month(sampleTimes)
years <- year(sampleTimes)
day(sampleTimes[1])
?lubridate
dweeks(sampleTimes[1])
wday(sampleTimes[1])
wday(sampleTimes[1], label=TRUE)
library(dplyr)
?filter
year_2012 <- filter(years, wday(sampleTimes[1], label=TRUE) == "Wed")
year_2012 <- filter(years, wday(sampleTimes[1], label=TRUE) == Wed)
wday(sampleTimes[1], label=TRUE) == Wed
wday(sampleTimes[1], label=TRUE) == "Wed"
year_2012 <- filter(years, wday(sampleTimes[1], label=TRUE) == "Wed")
year_2012 <- filter(years, wday(sampleTimes, label=TRUE) == "Wed")
year_2012 <- filter(sampleTimes, wday(sampleTimes, label=TRUE) == "Wed")
years <- year(sampleTimes)
head(years)
log <- years == 2012
sum(log)
sum(years == 2012)
year_2012 <- sampleTimes[years == 2012,1]
year_2012 <- sampleTimes[years == 2012]
year_2012[1]
year_2012[50]
months <- month(year_2012)
w_days <- wday(year_2012, label=TRUE)
sum(w_days == "Mon")
sum(year(sampleTimes) == 2012)
sum(year(sampleTimes) == 2012)
w_days <- wday(sampleTimes[years == 2012], label=TRUE)
sum(w_days == "Mon")
library(ggplot2)
library(caret)
names(iris)
table(iris$Species)
inTrain <- createDataPartition(iris$Species,
p=0.7,
list=FALSE)
training <- iris[inTrain, ]
testing <- iris[-inTrain, ]
qplot(Petal.Width, Sepal.Width,
colour=Species,
data=training)
modFit <- train(Species~.,
method="rpart",
data=training)
print(modFit$finalModel)
plot(modFit$finalModel,
uniform=TRUE,
main="Classification Tree")
text(modFit$finalModel,
use.n = TRUE,
all = TRUE,
cex = 0.8)
predict(modFit, newdata = testing)
preds <- predict(modFit, newdata = testing)
preds[1:10]
preds[1:5]
testing[1:5]
testing$Species[1:5]
preds[1:5]
testing$Species[1:5]
sum(preds != testing$Species)
which(preds != testing$Species)
install.packages('ElemStatLearn')
library(ElemStatLearn)
library(caret)
data(ozone, package="ElemStatLearn")
ozone <- ozone[order(ozone$ozone), ]
head(ozone)
ozone <- ozone[order(ozone$ozone), ]
head(ozone)
ll <- matrix(NA, nrow = 10, ncol = 155)
View(ll)
ll <- matrix(NA, nrow = 10, ncol = 155)
for (i in 1:10){
ss <- sample(1:dim(ozone)[1], replace=TRUE)
ozone0 <- ozone[ss,]
ozone0 <- ozone0[order(ozone0$ozone), ]
loess0 <- loess(temperature~ozone,
data = ozone0,
span = 0.2)
ll[i,] <- predict(loess0,
newdata = data.frame(ozone=1:155))
}
View(ll)
for (i in 1:10){
# resample with replacement
ss <- sample(1:dim(ozone)[1], replace=TRUE)
# resampled data sample at i
ozone0 <- ozone[ss,]
# reorder by ozone
ozone0 <- ozone0[order(ozone0$ozone), ]
# fit loess curve (like splines)
loess0 <- loess(temperature~ozone,
data = ozone0,
span = 0.2)
# make preduction for this resampled data on
ll[i,] <- predict(loess0,
newdata = data.frame(ozone=1:155))
}
ll <- matrix(NA, nrow = 10, ncol = 155)
for (i in 1:10){
# resample with replacement
ss <- sample(1:dim(ozone)[1], replace=TRUE)
# resampled data sample at i
ozone0 <- ozone[ss,]
# reorder by ozone
ozone0 <- ozone0[order(ozone0$ozone), ]
# fit loess curve (like splines)
loess0 <- loess(temperature~ozone,
data = ozone0,
span = 0.2)
# make preduction for this resampled data on
ll[i,] <- predict(loess0,
newdata = data.frame(ozone=1:155))
}
plot(ozone$ozone, ozone$temperature,
pch=19,
cex=0.5)
for (i in 1:10) {
lines(1:155,
ll[i,],
col='grey',
lwd=2)
}
lines(1:155, apply(ll,2,mean),
col='red',
lwd=2)
mean_pred <- lines(1:155, apply(ll,2,mean),
col='red',
lwd=2)
mean_pred <- apply(ll,2,mean)
head(mean_pred)
View(ll)
mean_pred <- apply(ll,2,mean, rm.na=TRUE)
mean_pred <- apply(ll,2,mean)
data(iris)
library(ggplot2)
library(caret)
names(iris)
table(iris$Species)
inTrain <- createDataPartition(iris$Species,
p=0.7,
list=FALSE)
training <- iris[inTrain, ]
testing <- iris[-inTrain, ]
modFit <- train(Species~.,
method="rf",
data=training,
prox=TRUE)
modFit
getTree(modFit$finalModel, k=2)
getTree(modFit$finalModel, k=3)
getTree(modFit$finalModel, k=2)
# Look at center of class' prediction
irisP <- classCenter(training[,c(3,4)],
training$Species,
modFit$finalModel$prox)
irisP <- as.data.frame(irisP)
irisP$Species <- rownames(irisP)
p <- qplot(Petal.Width, Petal.Width,
col=Species,
data=training)
p+geom_point(aes(x=Petal.Width, y=Petal.Length,
col=Species),
size=5,
shape=4,
data=irisP)
inTrain <- createDataPartition(iris$Species,
p=0.7,
list=FALSE)
training <- iris[inTrain, ]
testing <- iris[-inTrain, ]
modFit <- train(Species~.,
method="rf",
data=training,
prox=TRUE)
modFit
getTree(modFit$finalModel, k=2)
irisP <- classCenter(training[,c(3,4)],
training$Species,
modFit$finalModel$prox)
irisP <- as.data.frame(irisP)
irisP$Species <- rownames(irisP)
p <- qplot(Petal.Width, Petal.Width,
col=Species,
data=training)
p+geom_point(aes(x=Petal.Width, y=Petal.Length,
col=Species),
size=5,
shape=4,
data=irisP)
inTrain <- createDataPartition(iris$Species,
p=0.7,
list=FALSE)
training <- iris[inTrain, ]
testing <- iris[-inTrain, ]
modFit <- train(Species~.,
method="rf",
data=training,
prox=TRUE)
modFit
getTree(modFit$finalModel, k=2)
irisP <- classCenter(training[,c(3,4)],
training$Species,
modFit$finalModel$prox)
irisP <- as.data.frame(irisP)
irisP$Species <- rownames(irisP)
p <- qplot(Petal.Width, Petal.Width,
col=Species,
data=training)
p+geom_point(aes(x=Petal.Width, y=Petal.Length,
col=Species),
size=5,
shape=4,
data=irisP)
data(iris)
library(ggplot2)
library(caret)
names(iris)
table(iris$Species)
inTrain <- createDataPartition(iris$Species,
p=0.7,
list=FALSE)
training <- iris[inTrain, ]
testing <- iris[-inTrain, ]
library(ggplot2)
library(caret)
data(iris)
names(iris)
table(iris$Species)
inTrain <- createDataPartition(iris$Species,
p=0.7,
list=FALSE)
training <- iris[inTrain, ]
testing <- iris[-inTrain, ]
modFit <- train(Species~.,
method="rf",
data=training,
prox=TRUE)
modFit
getTree(modFit$finalModel, k=2)
irisP <- classCenter(training[,c(3,4)],
training$Species,
modFit$finalModel$prox)
irisP <- as.data.frame(irisP)
irisP$Species <- rownames(irisP)
irisP <- as.data.frame(irisP)
irisP$Species <- rownames(irisP)
p <- qplot(Petal.Width, Petal.Width,
col=Species,
data=training)
p+geom_point(aes(x=Petal.Width, y=Petal.Length,
col=Species),
size=5,
shape=4,
data=irisP)
p <- qplot(Petal.Width, Petal.Length,
col=Species,
data=training)
p+geom_point(aes(x=Petal.Width, y=Petal.Length,
col=Species),
size=5,
shape=4,
data=irisP)
pred <- predict(modFit, testing)
table(pred, testing$Species)
pred <- predict(modFit, testing)
testing$preRight <- testing$Species
table(pred, testing$Species)
inTrain <- createDataPartition(iris$Species,
p=0.7,
list=FALSE)
training <- iris[inTrain, ]
testing <- iris[-inTrain, ]
modFit <- train(Species~.,
method="rf",
data=training,
prox=TRUE)
modFit
getTree(modFit$finalModel, k=2)
irisP <- classCenter(training[,c(3,4)],
training$Species,
modFit$finalModel$prox)
irisP <- as.data.frame(irisP)
irisP$Species <- rownames(irisP)
p <- qplot(Petal.Width, Petal.Length,
col=Species,
data=training)
p+geom_point(aes(x=Petal.Width, y=Petal.Length,
col=Species),
size=5,
shape=4,
data=irisP)
pred <- predict(modFit, testing)
testing$preRight <- testing$Species
table(pred, testing$Species)
testing$preRight <- pred=testing$Species
pred <- predict(modFit, testing)
testing$preRight <- pred=testing$Species
table(pred, testing$Species)
qplot(Petal.Width, Petal.Length,
colour=preRight,
data=testing,
main="new data preds")
qplot(Petal.Width, Petal.Length,
colour=predRight,
data=testing,
main="new data preds")
testing$predRight <- pred=testing$Species
testing$predRight <- pred==testing$Species
table(pred, testing$Species)
table(pred, testing$Species)
qplot(Petal.Width, Petal.Length,
colour=predRight,
data=testing,
main="new data preds")
?randunif
