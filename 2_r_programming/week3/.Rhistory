1+1
v=c(1,2,3,4)
v
for (i in v)
1+i
for (i in v)
print(1+i)
1+1
q()
install.packages("swirl")
library("swirl", lib.loc="C:/Program Files/R/R-3.2.3/library")
detach("package:swirl", unload=TRUE)
library(swirl)
install_from_swirl('R Programming')
swirl()
swirl()
bye()
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
my_mean <- makeVector(1)
my_mean
my_mean$set()
my_mean$get()
my_mean$set(2)
my_mean$get()
my_mean$getmean()
rm(my_mean)
my_mean$get()
my_mean <- makeVector(c(1,2,3))
my_mean
my_mean$get()
my_mean$getmean()
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(my_mean)
getwd()
setwd("C:/Users/aujomb/Dropbox/Projects/datasciencecoursera/2_r_programming/week3")
ls()
dir()
dir()[1]
dir()[2]
source(c(dir()[1], dir()[2]))
source(dir()[1])
source(dir()[2])
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
my_matrix$get()
my_matrix$getInverse()
my_matrix$getinverse()
cacheSolve(my_matrix)
cacheSolve(my_matrix)
cacheSolve(my_matrix)
my_matrix$getinverse()
my_matrix$set(matrix(c(2, 2, 1, 4), 2, 2)
)
my_matrix$getinverse()
cacheSolve(my_matrix)
cacheSolve(my_matrix)
cacheSolve(my_matrix)
cacheSolve(my_matrix)
cacheSolve(my_matrix)
cacheSolve(my_matrix)
cacheSolve(my_matrix)
my_matrix$getinverse()
